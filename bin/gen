#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    mkdirp = require('mkdirp'),
    RSS = require('rss'),
    haroo = require('../lib/haroo'),
    renderer = require('../lib/renderer'),
    conf = require('../config'),
    exec = require('child_process').exec;

var sorc = path.resolve(conf.themeDir, conf.theme.name, 'public') +'/*';
var dest = path.resolve(conf.publicDir);
var cmmd = 'cp -R '+ sorc +' '+ dest;

var theme = path.resolve(conf.themeDir, conf.theme.name );
renderer.setViewDir(theme +'/views');

function write(output, res, charset) {
    fs.writeFileSync(output, res, charset || 'utf8');
    log("----> "+output);
}

function log(message) {
    console.log(message);
}

function rss() {
    var data = haroo.getMainData();
    var archives = data.archives;
    var res, id, archive, author, arvatar, file, output;

    var feed = new RSS({
        title: conf.meta.defaultTitle,
        description: conf.meta.description,
        feed_url: conf.meta.siteUrl +'/rss.xml',
        site_url: conf.meta.siteUrl,
        image_url: conf.meta.siteUrl +'/public/img/favorite.png'
    });

    log('=============================================================');
    log('===================== export rss.xml ========================');
    log('=============================================================');

    for(id in archives) {
        archive = archives[id];
        author = archive.author.head;
        arvatar = '<img src="'+ archive.author._gravatar.replace('128.jpg','48.jpg') +'"><br/>';
        author = '<a href="'+ author.twitter +'" target="_blank">'+ author.name +'</a>';

        feed.item({
            title: archive.head.title,
            description: arvatar + archive.cuthtml,
            url: conf.meta.siteUrl +'/post/'+ archive._file,
            author: author,
            guid: archive._file,
            date: archive.head.pulished
        });
    }

    write(conf.publicDir +'/rss.xml', feed.xml());
}

function page404() {
    var res, data = haroo.getMainData();

    data.config.meta.pageTitle = '404 page not found | ';

    log('=============================================================');
    log('======================= export 404.html =====================')
    log('=============================================================');

    res = renderer.http('404', data);
    write(conf.publicDir +'/404.html', res);
}

function index() {
    var res, data = haroo.getMainData();

    data.config.meta.pageTitle = '';

    res = renderer.render('main', data);
    write(conf.publicDir +'/index.html', res);

    log('=============================================================');
    log('===================== export index.html =====================')
    log('=============================================================');

    res = renderer.render('main', data);
    write(conf.publicDir +'/index.html', res);
}

function archives() {
    var res, data = haroo.getMainData();

    log('=============================================================');
    log('==================== export archive list ====================')
    log('=============================================================');

    data.config.meta.pageTitle = 'Blog Archives | ';

    mkdirp.sync(conf.publicDir +'/archives', 0755);

    res = renderer.render('archives', data);
    write(conf.publicDir +'/archives/index.html', res);
}

function archive() {
    var data = haroo.getMainData();
    var archives = data.archives;
    var res, id, archive, file, resources, output;

    log('=============================================================');
    log('===================== export articles =======================')
    log('=============================================================');

    for(id in archives) {
        archive = archives[id];
        file = archive._file;
        output = path.resolve(conf.publicDir, 'post', file);
        resources = path.resolve(conf.sourceDir, 'articles', file, 'img');

        mkdirp.sync(output, 0755);
        exec('cp -R '+ resources +' '+ output +'/img');

        data.archive = archive;
        data.config.meta.pageTitle = archive.head.title +' | ';

        res = renderer.render('archive', data);
        write(output +'/index.html', res);
    }
}

function categories() {
    var data = haroo.getMainData();
    var categories = data.categories;
    var res, id, cate, archive, file, output;

	data.config.meta.pageTitle = '';

    log('=============================================================');
    log('===================== export category =======================')
    log('=============================================================');

    output = path.resolve(conf.publicDir, 'category');

    mkdirp.sync(output, 0755);
    res = renderer.render('categories', data);

    write(output +'/index.html', res);
}

function cate() {
    var data = haroo.getMainData();
    var categories = data.categories;
    var res, id, cate, archive, file, output;

    log('=============================================================');
    log('===================== export category =======================')
    log('=============================================================');

    for(id in categories) {
        cate = categories[id];
        output = path.resolve(conf.publicDir, 'category', id);

        mkdirp.sync(output, 0755);
        data.cates = cate;
        data.config.meta.pageTitle = 'Kinds of '+ id +' | ';

        res = renderer.render('cate', data);
        write(output +'/index.html', res);
    }
}

function authors() {
    var data = haroo.getMainData();
    var authors = data.authors;
    var res, id, author, archive, file, output;

	data.config.meta.pageTitle = '';

    log('=============================================================');
    log('===================== export authors ========================')
    log('=============================================================');

    output = path.resolve(conf.publicDir, 'authors');
    mkdirp.sync(output, 0755);

    res = renderer.render('authors', data);
    write(output +'/index.html', res);
}

function author() {
    var data = haroo.getMainData();
    var authors = data.authors;
    var res, id, author, archive, file, output;

    log('=============================================================');
    log('===================== export author =========================')
    log('=============================================================');

    for(id in authors) {
        author = authors[id];
        output = path.resolve(conf.publicDir, 'authors', id);

        mkdirp.sync(output, 0755);
        data.author = author;
		data.config.meta.pageTitle = author.head.name +'\'s articles | ';

        res = renderer.render('author', data);
        write(output +'/index.html', res);
    }
}


function pages() {
    var data = haroo.getMainData();
    var pages = data.pages;
    var res, id, page, file, output, layout, display, status;

    log('=============================================================');
    log('====================== export page ==========================')
    log('=============================================================');

    for(id in pages) {
        page = pages[id];

        status = page.head.status;

        //문서 상태가 draft 인 경우는 퍼블리싱 하지 않는다.
        if(status == 'draft') {
            continue;
        }

        layout = page.head.advanced.layout || 'pages';
        display = page.head.advanced.display || 'top';

        output = page._dir.replace( conf.sourceDir, conf.publicDir );
        output = output.replace('/pages', '');

        mkdirp.sync(output, 0755);
        data.page = page;
        data.config.meta.pageTitle = page.head.title;

        res = renderer.page(layout +'/main', data);
        write(output +'/index.html', res);
    }
}

exec(cmmd, function(err, stdout, stdin) {
    if(!err) {
        console.log(cmmd);

        rss();
        page404();
        index();
        archives();
        archive();
        categories();
        cate();
        authors();
        author();
        pages();
    }
});
