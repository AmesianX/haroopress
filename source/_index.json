[{"header":{"title":"JavaScript The Core","author":"Andrw Kim","date":"Fri Dec 02 2011 00:31:36 GMT+0900 (KST)","categories":[],"tags":[],"acceptComment":true,"acceptTrackback":true,"published":"Fri Dec 02 2011 00:31:36 GMT+0900 (KST)","modified":"Fri Dec 02 2011 00:32:36 GMT+0900 (KST)","status":"draft","advanced":{}},"body":"<p><strong>이 기사는 <a href=\"http://dmitrysoshnikov.com/\">Dmitry A. Soshnikov</a>에 의해 작성된 <a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\">JavaScript. The Core.</a> 에 대한 내용을 허가를 받아 번역하였습니다.</strong></p>\n\n<h1>The Core</h1>\n\n<p>웹 상에서는 자바스크립트에 대한 수 많은 레퍼런스와 기사들이 있으나 ECMAScript 사양에 준하여 자세히 설명하고 있는 문서는 그리 많지 않습니다.  이 문서가 자바스크립트 본연의 기술을 이해하기 위해 필히 학습을 권장합니다.   뿐만 아니라 Dmitry 블로그에는 ECMAScript 사양에 대해서 굉장히 자세히 분석하여 포스팅을 하고 있으니 관심을 갖고 보기를 권장합니다.</p>\n\n<h1>소개</h1>\n\n<p>이 메모는 <a href=\"http://dmitrysoshnikov.com/tag/ecma-262-3/\">ECMA-262-3 in detail</a> 시리즈에서 얻은 지식을 정리한 것이며, 또한 설명도 되어 있습니다.  각각의 해당 ES3 시리즈 각 챕터에 대한 참조가 포함되어 있기 때문에, 관심이 있으면 자세한 내용은 그곳을 참조하십시오.</p>\n\n<p>이 글을 경험있는 프로그래머 혹은 전문가를 대상으로 합니다.</p>\n\n<p>그러면 서둘러, ECMAScript 의 기본이 되는 객체의 개념을 살펴보도록 하겠습니다.</p>\n","author":{"name":"Andrw J. Kim","blog":"http://ajaxian.kr","twitter":"andrwj","github":"andrwj","email":"andrwj@gmail.com","gravatar":"http://www.gravatar.com/avatar/16119e545a8a0947a4afd34e0125f2f9?r=pg&s=128.jpg&d=identicon"},"_file":"javascript-core"},{"header":{"title":"Mastering Node.js book - Preface","author":"fallroot","date":"Fri Dec 02 2012 00:31:36 GMT+0900 (KST)","categories":[],"tags":[],"acceptComment":true,"acceptTrackback":true,"published":"Fri Dec 02 2012 00:31:36 GMT+0900 (KST)","modified":"Fri Dec 02 2012 00:32:36 GMT+0900 (KST)","status":"draft","advanced":{}},"body":"<p><strong>이 기사는 <a href=\"http://dmitrysoshnikov.com/\">Dmitry A. Soshnikov</a>에 의해 작성된 <a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/\">Chapter 1. Execution Context</a> 에 대한 내용을 허가를 받아 번역하였습니다.</strong></p>\n\n<h1>소개</h1>\n\n<p>이 장에서는 ECMAScript 의 실행 컨텍스트와 연관된 실행 코드의 종류에 대해 설명합니다.</p>\n\n<h1>정의</h1>\n\n<p>컨트롤이 ECMAScript 실행 코드로 이동하면 컨트롤은 항상 실행 컨텍스트로 전환합니다.\n(역주: 브라우저에서 웹 페이지가 로드될 때의 일련의 과정중 자바스크립트 수행되는 시점)</p>\n<blockquote>\n<p>실행 컨텍스트 (이하 EC) 는 ECMA-262 의 사양에서 실행 코드를 특징별로 분류하고 구분하는데 사용되는 추상적인 개념입니다 .</p>\n</blockquote>\n<p>사양은 기술적인 구현 관점에서 EC 의 종류와 구조를 정확하게 정의하는 하고 있지는 않습니다.  자세한 내용은 이 사양을 구현하는 ECMAScript 엔진에 맡겨지고 있습니다.\n(역주: 그렇기 때문에 자바스크립트 엔진에 따라 속도가 다르거나 간혹 브라우저에 따라 다르게 동작하는 경우도 발생합니다.)</p>\n","author":{"name":"문추근","blog":"http://xxx.kr","twitter":"fallroot","github":"fallroot","email":"fallroot@gmail.com","gravatar":"http://www.gravatar.com/avatar/9e805a7d8d36e37e15a6076c8774c2f9?r=pg&s=128.jpg&d=identicon"},"_file":"mastering-nodejs-preface"},{"header":{"title":"Mastering Node.js book","author":"Rhio Kim","date":"Fri Dec 02 2012 00:31:36 GMT+0900 (KST)","categories":[],"tags":[],"acceptComment":true,"acceptTrackback":true,"published":"Fri Dec 02 2012 00:31:36 GMT+0900 (KST)","modified":"Fri Dec 02 2012 00:32:36 GMT+0900 (KST)","status":"draft","advanced":{}},"body":"<h1>Masterring Node.js</h1>\n\n<h2>Preface</h2>\n\n<h2>Overview</h2>\n\n<h3>What's Node.js?</h3>\n\n<h3>Why Google's V8?</h3>\n\n<h3>탄생배경</h3>\n\n<h4>C10k Problem</h4>\n\n<h4>Apache vs NginX</h4>\n\n<h4>Server-side JavaScript</h4>\n\n<h2>Architecture</h2>\n\n<ul>\n<li>davybrion.com/blog/2011/12/node-js-for-dummies/\n### Non-blocking I/O\n### Asyncronous(Event Loop)\n\n<ul>\n<li>Python Twisted</li>\n<li>ruby EventMachine</li>\n<li>perl Colo's AnyEvent\n### Single thread\n### Thread pool\n### Callback mechanism\n### Standard Module System</li>\n</ul></li>\n</ul>\n","author":{"name":"Rhio Kim","blog":"http://rhio.tistory.com","twitter":"rhiokim","github":"rhiokim","email":"rhio.kim@gmail.com","gravatar":"http://www.gravatar.com/avatar/0764d73c228492e36b339d8b6d7293ad?r=pg&s=128.jpg&d=identicon"},"_file":"mastering-nodejs"},{"header":{"title":"Markdown Blog","author":"Rhio Kim","date":"Fri Dec 02 2011 00:31:36 GMT+0900 (KST)","categories":["카테고리1","카테고리2","카테고리3"],"tags":["태그1","태그2","태그3"],"acceptComment":true,"acceptTrackback":true,"published":"Fri Dec 02 2011 00:31:36 GMT+0900 (KST)","modified":"Fri Dec 02 2011 00:32:36 GMT+0900 (KST)","status":"draft","advanced":{}},"body":"<h1>Intro</h1>\n\n<p>locally 는 웹 개발 시 로컬 서버를 손쉽게 생성해서 테스트 개발환경을 구축하기 위한 Node.js 기반의 미들웨어이다.  이 프로젝트는 Python 의 SimpleHTTPServer 에서 아이디어를 얻었다.</p>\n\n<p>언제, 어느 작업 디렉토리에 있던 내가 원하는 로컬 서버를 설정하기 위해서 사용된다.</p>\n<blockquote>\n<p>뿐만 아니라 최근의 웹 기술중 서버측 css인 less 를 지원한다. 그리고 향후 유용한 서버측 환경설정 프리셋을 제공하여 손쉽게 마크업 개발 환경을 만들 예정이다. <small>&lt;보류&gt;</small></p>\n</blockquote>\n<p>locally 는 connect 모듈을 기반으로 동작하는데 connect 모듈은 다양한 미들웨어를 추가해서 high class 기능등을 사용할 수 있다.  뿐만 아니라 손쉽게 로컬 웹 서버를 구축해서 마크업 환경을 설정할 수 있다.</p>\n\n<h1>Install</h1>\n\n<p>Require NPM(Node Package Manager)</p>\n","author":{"name":"Rhio Kim","blog":"http://rhio.tistory.com","twitter":"rhiokim","github":"rhiokim","email":"rhio.kim@gmail.com","gravatar":"http://www.gravatar.com/avatar/0764d73c228492e36b339d8b6d7293ad?r=pg&s=128.jpg&d=identicon"},"_file":"sample"}]